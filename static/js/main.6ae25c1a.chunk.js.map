{"version":3,"sources":["components/Header.js","components/ReusableForm.js","components/NewTicketForm.js","components/Ticket.js","components/TicketList.js","components/TicketDetail.js","components/EditTicketForm.js","actions/index.js","actions/ActionTypes.js","components/TicketControl.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/form-visible-reducer.js","reducers/ticket-list-reducer.js","index.js"],"names":["Header","ReusableForm","props","Fragment","onSubmit","formSubmissionHandler","type","name","placeholder","buttonText","NewTicketForm","event","preventDefault","onNewTicketCreation","names","target","value","location","issue","id","v4","timeOpen","Moment","formattedWaitTime","fromNow","Ticket","onClick","whenTicketClicked","TicketList","Object","values","ticketList","map","ticket","onTicketSelection","key","TicketDetail","onClickingDelete","onClickingEdit","EditTicketForm","onEditTicket","addTicket","TicketControl","updateTicketElapsedWaitTime","dispatch","masterTicketList","forEach","newFormattedWaitTime","action","handleClick","state","selectedTicket","setState","editing","handleAddingNewTicketToList","newTicket","a","handleChangingSelectedTicket","handleDeletingTicket","handleEditClick","handleEditingTicketInList","ticketToEdit","this","waitTimeUpdateTimer","setInterval","clearInterval","currentlyVisibleState","formVisibleOnPage","React","Component","connect","App","Boolean","window","hostname","match","rootReducer","combineReducers","assign","newStateUpdate","newState","updatedState","store","createStore","ReactDOM","render","document","getElementById","subscribe","console","log","getState","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ae25c1a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(){\n  return (\n    <h1>Help Queue</h1>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ReusableForm(props) {\n  return (\n    <React.Fragment>\n      <form onSubmit={props.formSubmissionHandler}>\n        <input\n          type='text'\n          name='names'\n          placeholder='Pair Names' />\n        <input\n          type='text'\n          name='location'\n          placeholder='Location' />\n        <textarea\n          name='issue'\n          placeholder='Describe your issue.' />\n        <button type='submit'>{props.buttonText}</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nReusableForm.propTypes = {\n  formSubmissionHandler: PropTypes.func,\n  buttonText: PropTypes.string\n};\n\nexport default ReusableForm;","import React from \"react\";\nimport { v4 } from 'uuid';\nimport PropTypes from \"prop-types\";\nimport ReusableForm from \"./ReusableForm\";\nimport Moment from 'moment';\n\nfunction NewTicketForm(props){\n\n  function handleNewTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onNewTicketCreation({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: v4(), timeOpen: new Moment(),formattedWaitTime: new Moment().fromNow(true)});\n  }\n\n  return (\n    <React.Fragment>\n      <ReusableForm \n        formSubmissionHandler={handleNewTicketFormSubmission}\n        buttonText=\"Help!\" />\n    </React.Fragment>\n  );\n}\n\nNewTicketForm.propTypes = {\n  onNewTicketCreation: PropTypes.func\n};\n\nexport default NewTicketForm;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Ticket(props){\n  return (\n    <React.Fragment>\n      <div onClick = {() => props.whenTicketClicked(props.id)}>\n        <h3>{props.location} - {props.names}</h3>\n        <p><em>{props.issue}</em></p>\n        <p><em>{props.formattedWaitTime}</em></p>\n      </div>\n      <hr/>\n    </React.Fragment>\n  );\n}\n\nTicket.propTypes = {\n  names: PropTypes.string,\n  location: PropTypes.string,\n  issue: PropTypes.string,\n  id: PropTypes.string,\n  whenTicketClicked: PropTypes.func,\n  formattedWaitTime: PropTypes.string\n};\n\nexport default Ticket;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Ticket from \"./Ticket\";\n\nfunction TicketList(props){\n  return (\n    <React.Fragment>\n      <hr/>\n      {Object.values(props.ticketList).map((ticket) => \n        <Ticket\n          whenTicketClicked = { props.onTicketSelection }\n          names={ticket.names}\n          location={ticket.location}\n          issue={ticket.issue}\n          formattedWaitTime={ticket.formattedWaitTime}\n          id={ticket.id}\n          key={ticket.id}/>\n      )}\n    </React.Fragment>\n  );\n}\n\nTicketList.propTypes = {\n  ticketList: PropTypes.object,\n  onTicketSelection: PropTypes.func\n};\n\nexport default TicketList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction TicketDetail(props){\n  const { ticket, onClickingDelete } = props;\n  \n  return (\n    <React.Fragment>\n      <h1>Ticket Detail</h1>\n      <h3>{ticket.location} - {ticket.names}</h3>\n      <p><em>{ticket.issue}</em></p>\n      <button onClick={ props.onClickingEdit }>Update Ticket</button>\n      <button onClick={()=> onClickingDelete(ticket.id) }>Close Ticket</button>\n      <hr/>\n    </React.Fragment>\n  );\n}\n\nTicketDetail.propTypes = {\n  ticket: PropTypes.object,\n  onClickingDelete: PropTypes.func,\n  onClickingEdit: PropTypes.func\n};\n\nexport default TicketDetail;","import React from \"react\";\nimport ReusableForm from \"./ReusableForm\";\nimport PropTypes from \"prop-types\";\n\nfunction EditTicketForm (props) {\n  const { ticket } = props;\n\n  function handleEditTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onEditTicket({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: ticket.id, timeOpen: ticket.timeOpen, formattedWaitTime: ticket.formattedWaitTime });\n  }\n\n  return (\n    <React.Fragment>\n      <ReusableForm \n        formSubmissionHandler={handleEditTicketFormSubmission}\n        buttonText=\"Update Ticket\" />\n    </React.Fragment>\n  );\n}\n\nEditTicketForm.propTypes = {\n  onEditTicket: PropTypes.func\n};\n\nexport default EditTicketForm;","import * as c from './ActionTypes';\n\nexport const deleteTicket = id => ({\n  type: c.DELETE_TICKET,\n  id\n});\n\nexport const toggleForm = () => ({\n  type: c.TOGGLE_FORM\n})\n\nexport const addTicket = (ticket) => {\n  const { names, location, issue, id, formattedWaitTime, timeOpen } = ticket;\n  return {\n    type: c.ADD_TICKET,\n    names: names,\n    location: location,\n    issue: issue,\n    id: id,\n    formattedWaitTime,\n    timeOpen: timeOpen\n  }\n}\n\nexport const updateTicketIssue = (values) => {\n  const {issue, id} = values;\n  return {\n    type: c.UPDATE_TICKET_ISSUE,\n    issue: issue,\n    id: id\n  }\n}\n\nexport const updateTime = (id, formattedWaitTime) => ({\n  type: c.UPDATE_TIME,\n  id: id,\n  formattedWaitTime: formattedWaitTime\n});","export const ADD_TICKET = 'ADD_TICKET';\nexport const DELETE_TICKET = 'DELETE_TICKET';\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\nexport const UPDATE_TICKET_ISSUE = 'UPDATE_TICKET_ISSUE';\nexport const UPDATE_TIME = 'UPDATE_TIME';","import React from 'react';\nimport NewTicketForm from './NewTicketForm';\nimport TicketList from './TicketList';\nimport TicketDetail from './TicketDetail';\nimport EditTicketForm from './EditTicketForm';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport * as a from './../actions';\n\nclass TicketControl extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedTicket: null,\n      editing: false\n    };\n  }\n\n  componentDidMount() {\n    this.waitTimeUpdateTimer = setInterval(() =>\n      this.updateTicketElapsedWaitTime(),\n    60000\n    );\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.waitTimeUpdateTimer);\n  }\n\n  updateTicketElapsedWaitTime = () => {\n    const { dispatch } = this.props;\n    Object.values(this.props.masterTicketList).forEach(ticket => {\n      const newFormattedWaitTime = ticket.timeOpen.fromNow(true);\n      const action = a.updateTime(ticket.id, newFormattedWaitTime);\n      dispatch(action);\n    });\n  }\n\n  handleClick = () => {\n    const { dispatch } = this.props;\n    if (this.state.selectedTicket != null) {\n      this.setState({\n        selectedTicket: null,\n        editing: false\n      });\n    } else {\n      const action = a.toggleForm();\n      dispatch(action);\n    }\n  }\n\n  // handleClick = () => {\n  //   const { dispatch } = this.props;\n  //   const action = a.toggleForm();\n  //   dispatch(action);\n  //   this.setState({selectedTicket: null});\n  // }\n\n  handleAddingNewTicketToList = (newTicket) => {\n    const { dispatch } = this.props;\n    const action = a.addTicket(newTicket);\n    dispatch(action);\n    const action2 = a.toggleForm();\n    dispatch(action2);\n  }\n\n  handleChangingSelectedTicket = (id) => {\n    const selectedTicket = this.props.masterTicketList[id];\n    this.setState({selectedTicket: selectedTicket});\n  }\n\n  handleDeletingTicket = (id) => {\n    const { dispatch } = this.props;\n    const action = a.deleteTicket(id);\n    dispatch(action);\n    this.setState({selectedTicket: null});\n  }\n\n  handleEditClick = () => {\n    this.setState({editing: true});\n  }\n\n  handleEditingTicketInList = (ticketToEdit) => {\n    const { dispatch } = this.props;\n    const action = a.addTicket(ticketToEdit);\n    dispatch(action);\n    this.setState({\n      editing: false,\n      selectedTicket: null\n    });\n  }\n\n  render(){\n    let currentlyVisibleState = null;\n    let buttonText = null;\n    if (this.state.editing ) {      \n      currentlyVisibleState = <EditTicketForm ticket = {this.state.selectedTicket} onEditTicket = {this.handleEditingTicketInList} />\n      buttonText = \"Return to Ticket List\";\n    } else if (this.state.selectedTicket != null) {\n      currentlyVisibleState = \n      <TicketDetail \n        ticket = {this.state.selectedTicket} \n        onClickingDelete = {this.handleDeletingTicket} \n        onClickingEdit = {this.handleEditClick} />\n      buttonText = \"Return to Ticket List\";\n    } else if (this.props.formVisibleOnPage) {\n      currentlyVisibleState = <NewTicketForm onNewTicketCreation={this.handleAddingNewTicketToList}  />;\n      buttonText = \"Return to Ticket List\";\n    } else {\n      currentlyVisibleState = <TicketList ticketList={this.props.masterTicketList} onTicketSelection={this.handleChangingSelectedTicket} />;\n      buttonText = \"Add Ticket\";\n    }\n    return (\n      <React.Fragment>\n        {currentlyVisibleState}\n        <button onClick={this.handleClick}>{buttonText}</button>\n      </React.Fragment>\n    );\n  }\n\n}\n\nTicketControl.propTypes = {\n  masterTicketList: PropTypes.object\n};\n\nconst mapStateToProps = state => {\n  return {\n    masterTicketList: state.masterTicketList,\n    formVisibleOnPage: state.formVisibleOnPage\n  }\n}\n\nTicketControl = connect(mapStateToProps)(TicketControl);\n\nexport default TicketControl;","import React from \"react\";\nimport Header from \"./Header\";\nimport TicketControl from \"./TicketControl\";\n\nfunction App(){\n  return ( \n    <React.Fragment>\n      <Header />\n      <TicketControl />\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import formVisibleReducer from './form-visible-reducer';\nimport ticketListReducer from './ticket-list-reducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n  formVisibleOnPage: formVisibleReducer,\n  masterTicketList: ticketListReducer\n});\n\nexport default rootReducer;","import * as c from './../actions/ActionTypes';\n\nexport default (state = false, action) => {\n  switch (action.type) {\n    case c.TOGGLE_FORM:\n      return !state;\n    default:\n      return state;\n    }\n};","import * as c from './../actions/ActionTypes';\n\nexport default (state = {}, action) => {\n  const { names, location, issue, id, formattedWaitTime, timeOpen } = action;\n  switch (action.type) {\n  case c.ADD_TICKET:\n    return Object.assign({}, state, {\n      [id]: {\n        names: names,\n        location: location,\n        issue: issue,\n        id: id,\n        timeOpen: timeOpen,\n        formattedWaitTime: formattedWaitTime\n      }\n    });\n    // return {...state, \n    //     [id]: {\n    //       names: names,\n    //       location: location,\n    //       issue: issue,\n    //       id: id\n    //   }\n    // };\n  case c.UPDATE_TICKET_ISSUE:\n    // const newStateUpdate = { ...state, [id]: { ...state[id], issue: issue } };\n    const newStateUpdate = Object.assign({}, state, {\n      [id]: Object.assign({}, state[id], {\n        issue: issue,\n      }),\n    });\n    return newStateUpdate;\n  case c.DELETE_TICKET:\n    const newState = { ...state };\n    delete newState[id];\n    return newState; \n    case c.UPDATE_TIME:\n    const newTicket = Object.assign({}, state[id], {formattedWaitTime});\n    const updatedState = Object.assign({}, state, {\n      [id]: newTicket\n    });\n    return updatedState;\n  default:\n    return state;\n  }\n};\n\n\n\n\n\n\n\n\n\n\n  // case 'ADD_TICKET_TAG':\n  //   const { module, topic, tagId, id } = action;\n\n  //   const newStateUpdate = { \n  //     ...state, [id]: { ...state[id], tags: { ...state[id].tags, [tagId]: { module: module, topic: topic} } \n  //   };\n\n  //   const newStateUpdate = Object.assign({}, state, {\n  //     [id]: Object.assign({}, state[id], {\n  //       tags: Object.assign({}, state[id], \n  //         [tagId] :{\n  //           module: module,\n  //           topic: topic\n  //         }\n  //       }),\n  //     }),\n  //   });\n  // return newStateUpdate;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}